import { EmbedBuilder } from 'discord.js';
import { readChangelog } from './version-manager.js';
import fs from 'fs';
import dotenv from 'dotenv';
dotenv.config();

const LAST_ANNOUNCED_FILE = './last-announced-version.txt';

/**
 * Lit la derni√®re version annonc√©e
 */
function getLastAnnouncedVersion() {
    try {
        if (fs.existsSync(LAST_ANNOUNCED_FILE)) {
            return fs.readFileSync(LAST_ANNOUNCED_FILE, 'utf8').trim();
        }
        return null;
    } catch (error) {
        console.error('Erreur lecture derni√®re version annonc√©e:', error.message);
        return null;
    }
}

/**
 * Sauvegarde la derni√®re version annonc√©e
 */
function saveLastAnnouncedVersion(version) {
    try {
        fs.writeFileSync(LAST_ANNOUNCED_FILE, version);
        return true;
    } catch (error) {
        console.error('Erreur sauvegarde derni√®re version annonc√©e:', error.message);
        return false;
    }
}

/**
 * D√©termine si une version est une release patch
 */
function isPatchRelease(currentVersion, previousVersion) {
    if (!previousVersion) return false;
    
    const [currMajor, currMinor, currPatch] = currentVersion.split('.').map(Number);
    const [prevMajor, prevMinor, prevPatch] = previousVersion.split('.').map(Number);
    
    // C'est un patch si seul le patch number a chang√©
    return currMajor === prevMajor && currMinor === prevMinor && currPatch !== prevPatch;
}

/**
 * V√©rifie s'il y a une nouvelle release √† annoncer et l'annonce si n√©cessaire
 */
export async function checkAndAnnounceNewRelease(bot) {
    try {
        const changelogChannelId = process.env.CHANGELOG_CHANNEL_ID;
        if (!changelogChannelId) {
            console.log('‚ö†Ô∏è CHANGELOG_CHANNEL_ID non configur√©, notifications ignor√©es');
            return;
        }

        const changelog = readChangelog();
        const currentVersion = changelog.version;
        const lastAnnouncedVersion = getLastAnnouncedVersion();

        // Si c'est la m√™me version que la derni√®re annonc√©e, ne rien faire
        if (currentVersion === lastAnnouncedVersion) {
            console.log(`üìã Version ${currentVersion} d√©j√† annonc√©e`);
            return;
        }

        // V√©rifier si c'est juste un patch
        if (lastAnnouncedVersion && isPatchRelease(currentVersion, lastAnnouncedVersion)) {
            console.log(`üîß Version ${currentVersion} est un patch, pas d'annonce Discord`);
            // Mettre √† jour quand m√™me le fichier pour √©viter de re-v√©rifier
            saveLastAnnouncedVersion(currentVersion);
            return;
        }

        // Trouver la release correspondante
        const currentRelease = changelog.releases.find(r => r.version === currentVersion);
        if (!currentRelease) {
            console.log(`‚ö†Ô∏è Release ${currentVersion} non trouv√©e dans changelog.json`);
            return;
        }

        // R√©cup√©rer le canal Discord
        const channel = await bot.channels.fetch(changelogChannelId);
        if (!channel) {
            console.error(`‚ùå Canal changelog non trouv√©: ${changelogChannelId}`);
            return;
        }

        // Cr√©er l'embed
        const embed = new EmbedBuilder()
            .setTitle(`üöÄ PCR Bot v${currentVersion} d√©ploy√© !`)
            .setDescription(currentRelease.title || `Release ${currentVersion}`)
            .setColor(0x00ff00)
            .setTimestamp()
            .setFooter({ 
                text: 'D√©ploiement automatique',
                iconURL: bot.user.displayAvatarURL()
            });

        // Ajouter les features par type
        if (currentRelease.features && currentRelease.features.length > 0) {
            const featuresByType = currentRelease.features.reduce((acc, feature) => {
                if (!acc[feature.type]) acc[feature.type] = [];
                acc[feature.type].push(feature);
                return acc;
            }, {});

            Object.entries(featuresByType).forEach(([type, features]) => {
                const typeTitle = {
                    'command': '‚ö° Nouvelles Commandes',
                    'event': 'üéØ Nouveaux √âv√©nements',
                    'feature': '‚ú® Nouvelles Fonctionnalit√©s',
                    'fix': 'üêõ Corrections',
                    'enhancement': 'üîß Am√©liorations'
                }[type] || 'üìã Autres';

                const featureList = features
                    .map(f => `‚Ä¢ **${f.name}**: ${f.description}`)
                    .join('\n');

                if (featureList.length > 0) {
                    embed.addFields({
                        name: typeTitle,
                        value: featureList.length > 1024 
                            ? featureList.substring(0, 1020) + '...' 
                            : featureList,
                        inline: false
                    });
                }
            });

            // Ajouter un r√©sum√©
            embed.setDescription(
                `${currentRelease.title || `Release ${currentVersion}`}\n\n` +
                `${currentRelease.features.length} nouvelle(s) fonctionnalit√©(s) incluse(s).`
            );
        }

        // Envoyer le message
        await channel.send({ embeds: [embed] });
        
        // Sauvegarder la version annonc√©e
        saveLastAnnouncedVersion(currentVersion);
        
        console.log(`‚úÖ Changelog v${currentVersion} annonc√© dans Discord`);

    } catch (error) {
        console.error('‚ùå Erreur lors de l\'annonce du changelog:', error.message);
    }
}

/**
 * Force l'annonce d'une version sp√©cifique (pour les tests)
 */
export async function forceAnnounceVersion(bot, version) {
    try {
        // R√©initialiser le fichier pour forcer l'annonce
        if (fs.existsSync(LAST_ANNOUNCED_FILE)) {
            fs.unlinkSync(LAST_ANNOUNCED_FILE);
        }
        
        await checkAndAnnounceNewRelease(bot);
        console.log(`‚úÖ Annonce forc√©e pour la version ${version}`);
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'annonce forc√©e:', error.message);
    }
}
