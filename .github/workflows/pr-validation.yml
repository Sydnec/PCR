name: 🔍 Pull Request Validation

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  validate:
    name: 🔍 Validate Pull Request
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 📋 Install dependencies
        run: npm ci
        
      - name: 🧪 Run tests
        run: npm test
        
      - name: 🔍 Lint code
        run: npm run lint
        
      - name: 🔒 Security audit
        run: npm audit --audit-level=moderate
        
      - name: 📊 Check PR size
        run: |
          echo "📊 Analyse de la taille de la PR..."
          
          # Compter les fichiers modifiés
          files_changed=$(git diff --name-only origin/main...HEAD | wc -l)
          lines_added=$(git diff --numstat origin/main...HEAD | awk '{sum+=$1} END {print sum}')
          lines_removed=$(git diff --numstat origin/main...HEAD | awk '{sum+=$2} END {print sum}')
          
          echo "📁 Fichiers modifiés: $files_changed"
          echo "➕ Lignes ajoutées: $lines_added"
          echo "➖ Lignes supprimées: $lines_removed"
          
          # Alertes pour les grosses PR
          if [ "$files_changed" -gt 20 ]; then
            echo "⚠️ PR importante: $files_changed fichiers modifiés"
          fi
          
          if [ "$lines_added" -gt 500 ]; then
            echo "⚠️ PR importante: $lines_added lignes ajoutées"
          fi
          
      - name: 📝 Check commit messages
        run: |
          echo "📝 Vérification des messages de commit..."
          
          # Vérifier les messages de commit depuis main
          commits=$(git log --oneline origin/main...HEAD)
          
          if [ -z "$commits" ]; then
            echo "⚠️ Aucun commit trouvé"
            exit 1
          fi
          
          echo "📋 Commits dans cette PR:"
          echo "$commits"
          
          # Vérifier le format des commits
          while read -r line; do
            if [[ -n "$line" ]]; then
              commit_msg=$(echo "$line" | cut -d' ' -f2-)
              echo "Vérification: $commit_msg"
              
              # Vérifier si le commit suit une convention basique
              if [[ "$commit_msg" =~ ^(feat|fix|docs|style|refactor|test|chore): ]]; then
                echo "✅ Format de commit conventionnel détecté"
              else
                echo "ℹ️ Format de commit libre (acceptable)"
              fi
            fi
          done <<< "$commits"
          
      - name: 🔍 Check for sensitive files
        run: |
          echo "🔍 Vérification des fichiers sensibles..."
          
          # Fichiers à éviter dans les commits
          sensitive_patterns="\.env$ \.env\. token secret password key \.pem$ \.key$"
          
          for pattern in $sensitive_patterns; do
            if git diff --name-only origin/main...HEAD | grep -E "$pattern"; then
              echo "❌ Fichier sensible détecté: $pattern"
              echo "⚠️ Vérifiez que vous n'exposez pas de secrets"
              exit 1
            fi
          done
          
          echo "✅ Aucun fichier sensible détecté"
          
      - name: 📊 Generate PR report
        run: |
          echo "📊 Rapport de la Pull Request"
          echo "============================="
          echo "🏷️ Branche: ${{ github.head_ref }}"
          echo "👤 Auteur: ${{ github.actor }}"
          echo "📅 Date: $(date)"
          echo ""
          
          echo "📈 Statistiques:"
          echo "- Fichiers modifiés: $(git diff --name-only origin/main...HEAD | wc -l)"
          echo "- Lignes ajoutées: $(git diff --numstat origin/main...HEAD | awk '{sum+=$1} END {print sum}')"
          echo "- Lignes supprimées: $(git diff --numstat origin/main...HEAD | awk '{sum+=$2} END {print sum}')"
          echo ""
          
          echo "📁 Fichiers modifiés:"
          git diff --name-only origin/main...HEAD | while read file; do
            echo "  - $file"
          done
          echo ""
          
          echo "✅ Validation réussie - PR prête pour review!"

  # Job optionnel pour commenter la PR
  comment:
    name: 💬 Comment PR  
    runs-on: ubuntu-latest
    needs: validate
    if: github.event.action == 'opened'
    
    steps:
      - name: 💬 Welcome comment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🎉 Merci pour votre contribution au PCR Bot!

            Cette Pull Request a été automatiquement validée. Voici quelques informations utiles:

            ## 🔍 Vérifications automatiques
            - ✅ Tests de syntaxe
            - ✅ Tests fonctionnels
            - ✅ Audit de sécurité
            - ✅ Vérification des fichiers sensibles

            ## 📋 Checklist pour le review
            - [ ] La fonctionnalité fonctionne comme attendu
            - [ ] Le code est bien documenté  
            - [ ] Les tests passent
            - [ ] Pas de régression détectée

            ## 🚀 Tests manuels
            Pour tester cette PR localement:
            \`\`\`bash
            git checkout ${{ github.head_ref }}
            ./pcr deploy
            ./pcr dev
            \`\`\`

            Un mainteneur va examiner votre PR bientôt. Merci! 🙏`
            })
