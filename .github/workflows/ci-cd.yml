name: 🤖 PCR Bot CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Job de tests et validation
  test:
    name: 🧪 Tests et validation
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 📋 Install dependencies
        run: npm ci
        
      - name: 🔍 Lint code
        run: npm run lint || echo "⚠️ Pas de script lint configuré"
        
      - name: 🧪 Run tests
        run: npm test
        
      - name: 🔒 Audit dependencies
        run: npm audit --audit-level=moderate
        
      - name: ✅ Validate Discord.js syntax
        run: node -c index.js

  # Job de build et vérification
  build:
    name: 🏗️ Build validation
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 📋 Install dependencies
        run: npm ci
        
      - name: 🔍 Check for missing dependencies
        run: |
          echo "🔍 Vérification des imports..."
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            function checkImports(dir) {
              const files = fs.readdirSync(dir, { withFileTypes: true });
              
              for (const file of files) {
                const fullPath = path.join(dir, file.name);
                
                if (file.isDirectory() && file.name !== 'node_modules') {
                  checkImports(fullPath);
                } else if (file.name.endsWith('.js')) {
                  try {
                    const content = fs.readFileSync(fullPath, 'utf8');
                    // Vérification basique des imports
                    if (content.includes('import') || content.includes('require')) {
                      console.log(\`✅ \${fullPath} - Imports détectés\`);
                    }
                  } catch (error) {
                    console.log(\`❌ \${fullPath} - Erreur: \${error.message}\`);
                  }
                }
              }
            }
            
            checkImports('.');
            console.log('✅ Vérification terminée');
          "

  # Job de déploiement (seulement sur main)
  deploy:
    name: 🚀 Deploy to production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🚀 Deploy to server
        run: |
          echo "🚀 Déploiement en production..."
          echo "⚠️ Configuration du déploiement SSH nécessaire"
          echo "📋 Étapes à configurer:"
          echo "  1. Ajouter SSH_HOST, SSH_USER, SSH_KEY dans les secrets GitHub"
          echo "  2. Configurer l'accès SSH au serveur"
          echo "  3. Décommenter les étapes de déploiement ci-dessous"
          
      # Décommentez et configurez ces étapes pour le déploiement automatique
      # - name: 🔐 Setup SSH
      #   uses: webfactory/ssh-agent@v0.8.0
      #   with:
      #     ssh-private-key: ${{ secrets.SSH_KEY }}
      #     
      # - name: 🚀 Deploy via SSH
      #   run: |
      #     ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
      #       cd /path/to/your/PCR
      #       git pull origin main
      #       ./pcr update
      #     EOF

  # Job de notification
  notify:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()
    
    steps:
      - name: 📢 Success notification
        if: needs.deploy.result == 'success'
        run: |
          echo "🎉 Déploiement réussi!"
          echo "✅ Tests: ${{ needs.test.result }}"
          echo "✅ Build: ${{ needs.build.result }}"
          echo "✅ Deploy: ${{ needs.deploy.result }}"
          
      - name: ❌ Failure notification  
        if: needs.test.result == 'failure' || needs.build.result == 'failure' || needs.deploy.result == 'failure'
        run: |
          echo "❌ Échec du workflow!"
          echo "🧪 Tests: ${{ needs.test.result }}"
          echo "🏗️ Build: ${{ needs.build.result }}"
          echo "🚀 Deploy: ${{ needs.deploy.result }}"
