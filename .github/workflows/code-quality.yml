name: üîç Code Quality Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  quality:
    name: üîç Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: üìã Install dependencies
        run: npm ci
        
      - name: üîí Security audit
        run: |
          echo "üîí Audit de s√©curit√© des d√©pendances..."
          npm audit --audit-level=moderate || true
          
      - name: üìä Check file structure
        run: |
          echo "üìä V√©rification de la structure du projet..."
          
          # V√©rifier les fichiers essentiels
          files_to_check=("index.js" "package.json" "pcr")
          for file in "${files_to_check[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ $file trouv√©"
            else
              echo "‚ùå $file manquant"
              exit 1
            fi
          done
          
          # V√©rifier les dossiers
          dirs_to_check=("commands" "events" "modules")
          for dir in "${dirs_to_check[@]}"; do
            if [ -d "$dir" ]; then
              echo "‚úÖ Dossier $dir trouv√©"
            else
              echo "‚ùå Dossier $dir manquant"
            fi
          done
          
      - name: üîç Validate JavaScript syntax
        run: |
          echo "üîç Validation de la syntaxe JavaScript..."
          
          # Fonction pour v√©rifier la syntaxe
          check_js_files() {
            local dir=$1
            local errors=0
            
            if [ -d "$dir" ]; then
              for file in "$dir"/*.js; do
                if [ -f "$file" ]; then
                  echo "V√©rification: $file"
                  if node -c "$file" 2>/dev/null; then
                    echo "‚úÖ $file - Syntaxe valide"
                  else
                    echo "‚ùå $file - Erreur de syntaxe"
                    errors=$((errors + 1))
                  fi
                fi
              done
            fi
            
            return $errors
          }
          
          # V√©rifier index.js
          if node -c index.js; then
            echo "‚úÖ index.js - Syntaxe valide"
          else
            echo "‚ùå index.js - Erreur de syntaxe"
            exit 1
          fi
          
          # V√©rifier les commandes
          check_js_files "commands"
          commands_errors=$?
          
          # V√©rifier les √©v√©nements
          check_js_files "events/client"
          events_errors=$?
          
          total_errors=$((commands_errors + events_errors))
          
          if [ $total_errors -eq 0 ]; then
            echo "üéâ Toutes les v√©rifications de syntaxe sont pass√©es!"
          else
            echo "‚ùå $total_errors erreur(s) de syntaxe d√©tect√©e(s)"
            exit 1
          fi
          
      - name: üìù Check for TODO/FIXME
        run: |
          echo "üìù Recherche de TODO/FIXME dans le code..."
          
          todos=$(grep -r "TODO\|FIXME\|XXX\|HACK" --include="*.js" . || true)
          
          if [ -n "$todos" ]; then
            echo "‚ö†Ô∏è TODO/FIXME trouv√©s:"
            echo "$todos"
          else
            echo "‚úÖ Aucun TODO/FIXME trouv√©"
          fi
          
      - name: üîç Check Discord.js patterns
        run: |
          echo "üîç V√©rification des patterns Discord.js..."
          
          # V√©rifier l'utilisation correcte des intents
          if grep -r "GatewayIntentBits" index.js; then
            echo "‚úÖ Intents Discord.js correctement utilis√©s"
          else
            echo "‚ö†Ô∏è V√©rifiez l'utilisation des intents Discord.js"
          fi
          
          # V√©rifier l'utilisation de SlashCommandBuilder
          command_files=$(find commands -name "*.js" -type f 2>/dev/null || true)
          if [ -n "$command_files" ]; then
            for file in $command_files; do
              if [ -f "$file" ] && grep -q "SlashCommandBuilder" "$file"; then
                echo "‚úÖ $file utilise SlashCommandBuilder"
              fi
            done
          fi
          
      - name: üìä Generate quality report
        run: |
          echo "üìä Rapport de qualit√© g√©n√©r√©"
          echo "=========================="
          echo "üìÅ Projet: PCR Bot Discord"
          echo "üìÖ Date: $(date)"
          echo "üî¢ Commit: ${{ github.sha }}"
          echo ""
          echo "üìà Statistiques:"
          echo "- Fichiers JS: $(find . -name "*.js" -not -path "./node_modules/*" | wc -l)"
          echo "- Commandes: $(ls commands/*.js 2>/dev/null | wc -l || echo 0)"
          echo "- √âv√©nements: $(ls events/client/*.js 2>/dev/null | wc -l || echo 0)"
          echo ""
          echo "‚úÖ V√©rifications pass√©es avec succ√®s!"
